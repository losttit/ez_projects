import random as rn

word_list = ['человек', 'работа', 'вопрос', 'сторона', 'страна', 'случай', 'голова',
        'ребенок', 'система', 'отношение', 'женщина', 'деньги', 'машина', 'проблема',
        'решение', 'история', 'власть', 'тысяча', 'возможность', 'результат',
        'область', 'статья', 'компания', 'группа', 'развитие', 'процесс', 'условие',
        'средство', 'начало', 'уровень', 'минута', 'качество', 'дорога', 'действие',
        'государство', 'любовь', 'взгляд', 'общество', 'деятельность', 'организация',
        'президент', 'комната', 'порядок', 'момент', 'письмо', 'помощь', 'ситуация',
        'состояние', 'квартира', 'внимание', 'смерть', 'программа', 'задача',
        'предприятие', 'разговор', 'правительство', 'производство', 'информация',
        'положение', 'интерес', 'федерация', 'правило', 'управление', 'мужчина',
        'партия', 'сердце', 'движение', 'материал', 'неделя', 'чувство', 'газета',
        'причина', 'основа', 'товарищ', 'культура', 'данные', 'мнение', 'документ',
        'институт', 'проект', 'встреча', 'директор', 'служба', 'судьба', 'девушка',
        'очередь', 'состав', 'количество', 'событие', 'объект', 'создание', 'значение',
        'период', 'искусство', 'структура', 'пример', 'исследование', 'гражданин',
        'начальник', 'принцип', 'воздух', 'характер', 'борьба', 'использование',
        'размер', 'образование', 'мальчик', 'представитель', 'участие', 'девочка',
        'политика', 'картина', 'доллар', 'территория', 'изменение', 'направление',
        'рисунок', 'течение', 'церковь', 'население', 'большинство', 'музыка',
        'правда', 'свобода', 'память', 'команда', 'договор', 'дерево', 'хозяин',
        'природа', 'телефон', 'позиция', 'писатель', 'самолет', 'солнце', 'спектакль',
        'способ', 'журнал', 'руководитель', 'специалист', 'оценка', 'регион', 'процент',
        'родитель', 'требование', 'основание', 'половина', 'анализ', 'автомобиль',
        'экономика', 'литература', 'бумага', 'степень', 'господин', 'надежда',
        'предмет', 'руководство', 'площадь', 'режиссер', 'поверхность', 'ощущение',
        'станция', 'революция', 'колено', 'министерство', 'стекло']

def display_hangman(tries):
    stages = [  # финальное состояние: голова, торс, обе руки, обе ноги
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / \\
                   -
                ''',
                # голова, торс, обе руки, одна нога
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / 
                   -
                ''',
                # голова, торс, обе руки
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |      
                   -
                ''',
                # голова, торс и одна рука
                '''
                   --------
                   |      |
                   |      O
                   |     \\|
                   |      |
                   |     
                   -
                ''',
                # голова и торс
                '''
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                ''',
                # голова
                '''
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                ''',
                # начальное состояние
                '''
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                '''
    ]
    return stages[tries]

def get_word():
   return rn.choice(word_list)

def inp_let():
   while True:
      s = input()
      if s.isalpha():
         return s
      else:
         print("Введите букву или слово целиком. Ничего больше вводить не надо")

def find_indicies(word, lett):
   indicies = []
   index = word.find(lett)
   while index!= -1:
      indicies.append(index)
      index = word.find(lett, index + 1)
   return indicies

def play(word):
   word_completion = ["_" for _ in range(len(word))]  # строка, содержащая символы _ на каждую букву задуманного слова
   guessed = False                    # сигнальная метка
   guessed_letters = []               # список уже названных букв
   guessed_words = []                 # список уже названных слов
   tries = 6                          # количество попыток
   print(word)  
   print('Давайте играть в угадайку слов!')
   while guessed == False:
      print(*word_completion, sep="")
      print("Осталось попыток:", tries)
      print(display_hangman(tries))
      print("Введите букву или слово целиком:")
      lett = inp_let()
      if len(lett) == 1: # если введена одна буква
         if lett.lower() in word.lower() and lett.lower() not in guessed_letters: # если буква есть в слове и еще не угадана
            guessed_letters.append(lett.lower())
            indicies = find_indicies(word, lett.lower())
            for index in indicies:
                word_completion[index] = lett.lower()
         elif lett.lower() in word.lower() and lett.lower() in guessed_letters:
            print("Буква уже угадана.")
            tries -= 1
         else:
            print("Такой буквы в слове нет.")
            tries -= 1
      
      elif len(lett) > 1: # если введено слово
         if lett.lower() == word.lower(): # если слово правильное
            guessed_words.append(lett.lower())
            print("Поздравляю, Вы угадали слово!")
            guessed = True
         else:
            guessed_words.append(lett.lower())
            print("Слово не совпадает, попробуйте ещё раз.")
            tries -= 1 

      if word_completion.count("_") == 0:
         print(*word_completion, sep="")
         print("Поздравляю, Вы выиграли!")
         guessed = True
      
      if tries == 0:
         print(display_hangman(tries))
         print(f"К сожалению, Вы проиграли! Попыток больше не осталось.\nЗагаданное слово: {word}")
         break

     
word = get_word()
play(word)